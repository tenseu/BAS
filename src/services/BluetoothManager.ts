import { ref } from 'vue'

export interface ControllerData {
  leftStick: { x: number; y: number }
  rightStick: { x: number; y: number }
  buttons: { [key: string]: boolean }
}

export class BluetoothManager {
  private device: BluetoothDevice | null = null
  private server: BluetoothRemoteGATTServer | null = null
  private characteristic: BluetoothRemoteGATTCharacteristic | null = null

  public isConnected = ref(false)
  public isConnecting = ref(false)
  public error = ref<string | null>(null)

  private readonly DEVICE_NAME = 'DroneController'

  // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö UUID (–æ—Å—Ç–∞–≤–∏–ª –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, –Ω–æ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º)
  private readonly SERVICES = [
    {
      service: '0000ffe0-0000-1000-8000-00805f9b34fb',
      characteristic: '0000ffe1-0000-1000-8000-00805f9b34fb'
    },
    {
      service: '6e400001-b5a3-f393-e0a9-e50e24dcca9e',
      characteristic: '6e400002-b5a3-f393-e0a9-e50e24dcca9e'
    },
    {
      service: '49535343-fe7d-4ae5-8fa9-9fafd205e455',
      characteristic: '49535343-8841-43f4-a8d4-ecbe34729bb3'
    },
    {
      service: '0000180d-0000-1000-8000-00805f9b34fb',
      characteristic: '00002a37-0000-1000-8000-00805f9b34fb'
    }
  ]

  constructor() {
    console.log('BluetoothManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è')
    console.log('navigator.bluetooth –¥–æ—Å—Ç—É–ø–µ–Ω:', !!navigator.bluetooth)
  }

  public async connect(): Promise<void> {
    console.log('BluetoothManager: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶')
    this.isConnecting.value = true
    this.error.value = null

    try {
      // üîπ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      this.device = { name: "Mock DroneController" } as BluetoothDevice
      this.server = null
      this.characteristic = null

      this.isConnected.value = true

      // –ó–µ–ª–µ–Ω—ã–π –ª–æ–≥ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
      console.log('%c‚úÖ –°–æ–ø—Ä—è–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'color: limegreen; font-weight: bold;')
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err)
      this.error.value = err instanceof Error ? err.message : String(err)
      throw err
    } finally {
      this.isConnecting.value = false
    }
  }

  public async disconnect(): Promise<void> {
    try {
      this.device = null
      this.server = null
      this.characteristic = null
      this.isConnected.value = false
      console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ')
    } catch (err) {
      this.error.value = err instanceof Error ? err.message : String(err)
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', err)
    }
  }

  private onDisconnected = () => {
    console.warn('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ')
    this.isConnected.value = false
    this.error.value = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ'
  }

  public async sendData(data: ControllerData): Promise<void> {
    if (!this.isConnected.value) {
      console.warn('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è)')
      return
    }

    const json = JSON.stringify(data)
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', json)
  }
}
